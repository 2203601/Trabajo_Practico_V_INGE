# azure-pipelines.yml
# YAML CORREGIDO: ConexiÃ³n Backend-Frontend Funcional

trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

variables:
    RESOURCE_GROUP_NAME: 'TPS-INGE-2025' 
    azureServiceConnection: 'azure-tp05-connection'
    
    backendAppNameQA: 'Coffeehub-Back-QA'
    frontendAppNameQA: 'Coffeehub-Front-QA'
    backendAppNameProd: 'Coffeehub-Back-Prod'
    frontendAppNameProd: 'Coffeehub-Front-Prod'

stages:
- stage: Build
  displayName: "CI: Instalar, Probar y Empaquetar"
  jobs:
  - job: BuildJob
    steps:
      - script: |
          npm install
        displayName: 'Instalar Dependencias (Backend)'
        workingDirectory: 'coffehub/backend'
        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/backend'
          artifact: 'backend-code'
        displayName: "Publicar CÃ³digo Backend"
        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/frontend'
          artifact: 'frontend-code'
        displayName: "Publicar CÃ³digo Frontend"


- stage: Deploy_QA
  displayName: "CD: Desplegar a QA y Configurar Entorno"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source' 
              displayName: "Descargar CÃ³digo Backend"

            - task: AzureWebApp@1
              displayName: "Deploy Backend QA (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameQA)'
                appType: 'webAppContainer'
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM' 
                startUpCommand: 'sh -c "npm install && npm start"' 
            
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameQA)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'
                startUpCommand: 'npm install && npm start'

            # ðŸ”§ CORREGIDO: URL con HTTPS y sintaxis correcta de variables
            - task: AzureCLI@2
              displayName: 'Configurar URL del Backend en Frontend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_URL_VAL="https://coffeehub-back-qa-argeftdrb3dkb9du.brazilsouth-01.azurewebsites.net"
                  FRONTEND_APP='$(frontendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "Configurando BACKEND_URL en $FRONTEND_APP a $BACKEND_URL_VAL"
                  az webapp config appsettings set --name "$FRONTEND_APP" --resource-group "$RG" --settings BACKEND_URL="$BACKEND_URL_VAL"

            # ðŸ”§ CORREGIDO: CORS con sintaxis correcta de variables
            - task: AzureCLI@2
              displayName: 'Configurar CORS en Backend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  FRONTEND_URL_VAL="https://coffeehub-front-qa-argqggbvc3g0gkdc.brazilsouth-01.azurewebsites.net"
                  BACKEND_APP='$(backendAppNameQA)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "Configurando CORS en $BACKEND_APP para aceptar peticiones de $FRONTEND_URL_VAL"
                  az webapp cors add --name "$BACKEND_APP" --resource-group "$RG" --allowed-origins "$FRONTEND_URL_VAL"


- stage: Sync_Data_QA_to_PROD
  displayName: "Sincronizar DB de QA a PROD (SQLite)"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - job: Sync
    displayName: "Copiar coffeehub.db"
    steps:
      - task: AzureCLI@2
        displayName: "Sincronizar DB vÃ­a CLI (Kudu API)"
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            DB_FILE='coffeehub.db'
            SOURCE_APP='$(backendAppNameQA)'
            TARGET_APP='$(backendAppNameProd)'
            RG='$(RESOURCE_GROUP_NAME)'
            
            echo "Iniciando SincronizaciÃ³n (Descarga de $SOURCE_APP)..."
            
            CRED_JSON=$(az webapp deployment list-latest -n "$SOURCE_APP" -g "$RG" --query "[0].publishingProfile.details" -o json 2>/dev/null)
            
            if [ -z "$CRED_JSON" ] || ! command -v jq &> /dev/null; then
                echo "##[warning]No se pudo obtener el perfil de publicaciÃ³n."
                USERNAME=""
                PASSWORD=""
            else
                USERNAME=$(echo $CRED_JSON | jq -r '.[0].userName')
                PASSWORD=$(echo $CRED_JSON | jq -r '.[0].password')
            fi
            
            KUDU_URL="https://${SOURCE_APP}.scm.azurewebsites.net/api/vfs/site/wwwroot/$DB_FILE"
            
            if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
                curl -u "$USERNAME:$PASSWORD" -o "$DB_FILE" "$KUDU_URL"
            else
                curl -o "$DB_FILE" "$KUDU_URL"
            fi

            if [ ! -s "$DB_FILE" ]; then
                echo "##[error]Error al descargar $DB_FILE."
                exit 1 
            fi
            
            echo "âœ… Archivo $DB_FILE descargado exitosamente."
            
            zip -r db_transfer.zip $DB_FILE
            
            az webapp deploy --name "$TARGET_APP" --resource-group "$RG" --type zip --src-path db_transfer.zip --target-path '/home/site/wwwroot/'
            
            echo "âœ… Datos de QA copiados a PROD."


- stage: Deploy_PROD
  displayName: "CD: Desplegar a ProducciÃ³n y Configurar Entorno"
  dependsOn: Sync_Data_QA_to_PROD 
  condition: succeeded()
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source'
              displayName: "Descargar CÃ³digo Backend"

            - task: AzureWebApp@1
              displayName: "Deploy Backend PROD (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameProd)'
                appType: 'webAppContainer'
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM'
                startUpCommand: 'sh -c "npm install && npm start"'
            
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameProd)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'  

            - task: AzureCLI@2
              displayName: 'Configurar URL del Backend en Frontend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_URL_VAL="https://$(backendAppNameProd).azurewebsites.net"
                  FRONTEND_APP='$(frontendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "Configurando BACKEND_URL en $FRONTEND_APP a $BACKEND_URL_VAL"
                  az webapp config appsettings set --name "$FRONTEND_APP" --resource-group "$RG" --settings BACKEND_URL="$BACKEND_URL_VAL"

            - task: AzureCLI@2
              displayName: 'Configurar CORS en Backend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  FRONTEND_URL_VAL="https://$(frontendAppNameProd).azurewebsites.net"
                  BACKEND_APP='$(backendAppNameProd)'
                  RG='$(RESOURCE_GROUP_NAME)'
                  echo "Configurando CORS en $BACKEND_APP para aceptar peticiones de $FRONTEND_URL_VAL"
                  az webapp cors add --name "$BACKEND_APP" --resource-group "$RG" --allowed-origins "$FRONTEND_URL_VAL"