# azure-pipelines.yml
# YAML FINAL CORREGIDO: CI/CD Completo con Docker (Build en Azure), SQLite y Sincronizaci√≥n de Datos QA -> PROD

trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

variables:
    # üõëüõ†Ô∏è 1. ACTUALIZAR: Nombre del Grupo de Recursos (CR√çTICO para Azure CLI)
    RESOURCE_GROUP_NAME: 'TPS-INGE-2025' 
    # üõëüõ†Ô∏è 2. ACTUALIZAR: Nombre de tu conexi√≥n general de Azure (es la √∫nica que tienes)
    azureServiceConnection: 'azure-tp05-connection'
    
    # Nombres de App Services
    backendAppNameQA: 'Coffeehub-Back-QA'
    frontendAppNameQA: 'Coffeehub-Front-QA'
    backendAppNameProd: 'Coffeehub-Back-Prod'
    frontendAppNameProd: 'Coffeehub-Front-Prod'


# ===============================
# BUILD STAGE (INTEGRACI√ìN CONTINUA: Instala, Prueba y Publica C√≥digo)
# ===============================
stages:
- stage: Build
  displayName: "CI: Instalar, Probar y Empaquetar"
  jobs:
  - job: BuildJob
    steps:
      # 1. Instalar dependencias del Backend (para pruebas y empaquetado)
      - script: |
          npm install
        displayName: 'Instalar Dependencias (Backend)'
        workingDirectory: 'coffehub/backend'

      # 2. Ejecutar Pruebas Unitarias (CI) - RESTAURADO
      # Nota: Debes tener un script 'test' definido en package.json
      - script: |
          npm test
        displayName: 'Ejecutar Pruebas Unitarias'
        workingDirectory: 'coffehub/backend'
        
      # 3. Publicar la Carpeta del Backend (c√≥digo fuente y Dockerfile)
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/backend'
          artifact: 'backend-code' # Artefacto con el c√≥digo fuente para el Build en Azure
        displayName: "Publicar C√≥digo Backend"
        
      # 4. Publicar el Frontend est√°tico
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/frontend'
          artifact: 'frontend-code'
        displayName: "Publicar C√≥digo Frontend"



# ===============================
# DEPLOY QA (CD: Descarga el c√≥digo y usa Build-on-Azure)
# ===============================
- stage: Deploy_QA
  displayName: "CD: Desplegar a QA"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Descargar el C√≥digo Fuente del Backend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                # RUTA CORREGIDA: Usamos /backend-source
                path: '$(Pipeline.Workspace)/backend-source' 
              displayName: "Descargar C√≥digo Backend"

            # 2. Despliega la Carpeta y Fuerza el Build/Run en Azure (Contenedor Docker)
            - task: AzureWebApp@1
              displayName: "Deploy Backend QA (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameQA)'
                appType: 'webAppContainer'
                # PATH CORRECTO: Apunta a la carpeta donde se descarg√≥ el artefacto
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM' 
                startUpCommand: 'sh -c "npm install && npm start"' 
            
            # 3. Despliega el Frontend est√°tico
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameQA)'
                # PATH CORRECTO
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'



# ---------------------------------
# SINCRONIZACI√ìN DE DATOS (Copia coffeehub.db)
# ---------------------------------
- stage: Sync_Data_QA_to_PROD
  displayName: "Sincronizar DB de QA a PROD (SQLite)"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - job: Sync
    displayName: "Copiar coffeehub.db"
    steps:
      - task: AzureCLI@2
        displayName: "Sincronizar DB v√≠a CLI"
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            DB_FILE='coffeehub.db'
            SOURCE_APP=$(backendAppNameQA)
            TARGET_APP=$(backendAppNameProd)
            RG=$(RESOURCE_GROUP_NAME)
            
            # 1. Descargar el archivo coffeehub.db
            echo "1. Descargando DB de QA ($SOURCE_APP)..."
            az webapp log download --name $SOURCE_APP --resource-group $RG --log-file $DB_FILE --path '/home/site/wwwroot/$DB_FILE' || { 
              echo "Error: No se pudo descargar el archivo $DB_FILE. Aseg√∫rese de que el archivo existe en QA." 
              exit 1 
            }
            
            # 2. Subir el archivo coffeehub.db al App Service PROD (Sobrescribe)
            echo "2. Subiendo DB a PROD ($TARGET_APP)..."
            zip -r db_transfer.zip $DB_FILE
            az webapp deploy --name $TARGET_APP --resource-group $RG --type zip --src-path db_transfer.zip --target-path '/home/site/wwwroot/'
            
            echo "‚úÖ Datos de QA ($DB_FILE) copiados a PROD. Sincronizaci√≥n completada."



# ===============================
# DEPLOY PROD (CD: Descarga el c√≥digo y usa Build-on-Azure)
# ===============================
- stage: Deploy_PROD
  displayName: "CD: Desplegar a Producci√≥n"
  dependsOn: Sync_Data_QA_to_PROD 
  condition: succeeded()
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Descargar el C√≥digo Fuente del Backend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source'
              displayName: "Descargar C√≥digo Backend"

            # 2. Despliega la Carpeta y Fuerza el Build/Run en Azure
            - task: AzureWebApp@1
              displayName: "Deploy Backend PROD (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameProd)'
                appType: 'webAppContainer'
                # PATH CORRECTO
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM'
                startUpCommand: 'sh -c "npm install && npm start"'
            
            # 3. Despliega el Frontend est√°tico
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameProd)'
                # PATH CORRECTO
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'
