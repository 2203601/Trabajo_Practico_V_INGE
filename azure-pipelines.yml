# azure-pipelines.yml
# YAML FINAL CORREGIDO: CI/CD Completo con Docker (Build en Azure), SQLite, Sincronizaci√≥n, CORS y Configuraci√≥n de URL.

trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

variables:
    # üõëüõ†Ô∏è 1. ACTUALIZAR: Nombre del Grupo de Recursos (CR√çTICO para Azure CLI)
    RESOURCE_GROUP_NAME: 'TPS-INGE-2025' 
    # üõëüõ†Ô∏è 2. ACTUALIZAR: Nombre de tu conexi√≥n general de Azure (es la √∫nica que tienes)
    azureServiceConnection: 'azure-tp05-connection'
    
    # Nombres de App Services
    backendAppNameQA: 'Coffeehub-Back-QA'
    frontendAppNameQA: 'Coffeehub-Front-QA'
    backendAppNameProd: 'Coffeehub-Back-Prod'
    frontendAppNameProd: 'Coffeehub-Front-Prod'


# ===============================
# BUILD STAGE (INTEGRACI√ìN CONTINUA)
# ===============================
stages:
- stage: Build
  displayName: "CI: Instalar, Probar y Empaquetar"
  jobs:
  - job: BuildJob
    steps:
      # 1. Instalar dependencias del Backend (para pruebas y empaquetado)
      - script: |
          npm install
        displayName: 'Instalar Dependencias (Backend)'
        workingDirectory: 'coffehub/backend'

      
        
      # 3. Publicar Artefactos
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/backend'
          artifact: 'backend-code'
        displayName: "Publicar C√≥digo Backend"
        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/frontend'
          artifact: 'frontend-code'
        displayName: "Publicar C√≥digo Frontend"




# ===============================
# DEPLOY QA (CD: Descarga el c√≥digo, Build-on-Azure y Configuraci√≥n)
# ===============================
- stage: Deploy_QA
  displayName: "CD: Desplegar a QA y Configurar Entorno"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Descargar C√≥digo Backend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source' 
              displayName: "Descargar C√≥digo Backend"

            # 2. Desplegar Backend (Build Directo)
            - task: AzureWebApp@1
              displayName: "Deploy Backend QA (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameQA)'
                appType: 'webAppContainer'
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM' 
                startUpCommand: 'sh -c "npm install && npm start"' 
            
            # 3. Desplegar Frontend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameQA)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'

            # üõë 4. TAREA CLAVE: Configurar URL del Backend en el Frontend App Service
            - task: AzureCLI@2
              displayName: 'Configurar URL del Backend en Frontend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  # La variable 'BACKEND_URL' debe ser le√≠da por tu c√≥digo frontend.
                  BACKEND_URL_VAL="https://$(backendAppNameQA).azurewebsites.net"
                  FRONTEND_APP=$(frontendAppNameQA)
                  RG=$(RESOURCE_GROUP_NAME)
                  echo "Configurando BACKEND_URL en $FRONTEND_APP a $BACKEND_URL_VAL"
                  az webapp config appsettings set --name $FRONTEND_APP --resource-group $RG --settings BACKEND_URL=$BACKEND_URL_VAL

            # üõë 5. TAREA CLAVE: Configurar CORS en el Backend App Service
            - task: AzureCLI@2
              displayName: 'Configurar CORS en Backend QA'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  # El backend debe aceptar peticiones desde la URL del frontend.
                  FRONTEND_URL_VAL="https://$(frontendAppNameQA).azurewebsites.net"
                  BACKEND_APP=$(backendAppNameQA)
                  RG=$(RESOURCE_GROUP_NAME)
                  echo "Configurando CORS en $BACKEND_APP para aceptar peticiones de $FRONTEND_URL_VAL"
                  az webapp cors add --name $BACKEND_APP --resource-group $RG --allowed-origins $FRONTEND_URL_VAL 



# ---------------------------------
# SINCRONIZACI√ìN DE DATOS (Copia coffeehub.db)
# ---------------------------------
- stage: Sync_Data_QA_to_PROD
  displayName: "Sincronizar DB de QA a PROD (SQLite)"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - job: Sync
    displayName: "Copiar coffeehub.db"
    steps:
      - task: AzureCLI@2
        displayName: "Sincronizar DB v√≠a CLI (Kudu API)"
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          # Usamos curl/Kudu API para descargar el archivo espec√≠fico
          inlineScript: |
            DB_FILE='coffeehub.db'
            SOURCE_APP=$(backendAppNameQA)
            TARGET_APP=$(backendAppNameProd)
            RG=$(RESOURCE_GROUP_NAME)
            
            echo "Iniciando Sincronizaci√≥n (Descarga de $SOURCE_APP)..."
            
            # Aseg√∫rate de que curl y jq est√©n disponibles si est√°s usando un agente self-hosted personalizado
            
            # Obtener credenciales Kudu para descargar
            CRED_JSON=$(az webapp deployment list-latest -n $SOURCE_APP -g $RG --query "[0].publishingProfile.details" -o json 2>/dev/null)
            
            # Verificaci√≥n de credenciales (manejo de errores de jq si no se encuentra)
            if [ -z "$CRED_JSON" ] || ! command -v jq &> /dev/null; then
                echo "##[warning]No se pudo obtener el perfil de publicaci√≥n. Intentando descarga directa, puede fallar si se requiere autenticaci√≥n Kudu."
                # Asignar valores por defecto o vac√≠os si jq no est√° disponible o falla
                USERNAME=""
                PASSWORD=""
            else
                USERNAME=$(echo $CRED_JSON | jq -r '.[0].userName')
                PASSWORD=$(echo $CRED_JSON | jq -r '.[0].password')
            fi
            
            KUDU_URL="https://${SOURCE_APP}.scm.azurewebsites.net/api/vfs/site/wwwroot/$DB_FILE"
            
            # Descargamos el archivo con curl, usando autenticaci√≥n si est√° disponible
            if [ -n "$USERNAME" ] && [ -n "$PASSWORD" ]; then
                curl -u "$USERNAME:$PASSWORD" -o "$DB_FILE" "$KUDU_URL"
            else
                curl -o "$DB_FILE" "$KUDU_URL" # Intentar sin auth (a veces funciona en la CLI)
            fi

            # Si el archivo tiene un tama√±o > 0, asumimos √©xito.
            if [ ! -s "$DB_FILE" ]; then
                echo "##[error]Error al descargar $DB_FILE. El archivo no existe o el Kudu API fall√≥. Verifique el nombre del archivo y la configuraci√≥n."
                exit 1 
            fi
            
            echo "‚úÖ Archivo $DB_FILE descargado exitosamente (Tama√±o: $(du -h $DB_FILE | awk '{print $1}'))."
            
            # PASO 2: Subir el archivo coffeehub.db al App Service PROD (Sobrescribe)
            echo "2. Subiendo DB a PROD ($TARGET_APP)..."
            
            zip -r db_transfer.zip $DB_FILE
            
            az webapp deploy --name $TARGET_APP --resource-group $RG --type zip --src-path db_transfer.zip --target-path '/home/site/wwwroot/'
            
            echo "‚úÖ Datos de QA ($DB_FILE) copiados a PROD. Sincronizaci√≥n completada."




# ===============================
# DEPLOY PROD (CD: Descarga el c√≥digo, Build-on-Azure y Configuraci√≥n)
# ===============================
- stage: Deploy_PROD
  displayName: "CD: Desplegar a Producci√≥n y Configurar Entorno"
  dependsOn: Sync_Data_QA_to_PROD 
  condition: succeeded()
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Descargar C√≥digo Backend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend-code'
                path: '$(Pipeline.Workspace)/backend-source'
              displayName: "Descargar C√≥digo Backend"

            # 2. Desplegar Backend
            - task: AzureWebApp@1
              displayName: "Deploy Backend PROD (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameProd)'
                appType: 'webAppContainer'
                package: '$(Pipeline.Workspace)/backend-source' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM'
                startUpCommand: 'sh -c "npm install && npm start"'
            
            # 3. Desplegar Frontend
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend-code'
                path: '$(Pipeline.Workspace)/frontend-source'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameProd)'
                package: '$(Pipeline.Workspace)/frontend-source'
                runtimeStack: 'NODE|18-lts'  

            # üõë 4. TAREA CLAVE: Configurar URL del Backend en el Frontend App Service
            - task: AzureCLI@2
              displayName: 'Configurar URL del Backend en Frontend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  BACKEND_URL_VAL="https://$(backendAppNameProd).azurewebsites.net"
                  FRONTEND_APP=$(frontendAppNameProd)
                  RG=$(RESOURCE_GROUP_NAME)
                  echo "Configurando BACKEND_URL en $FRONTEND_APP a $BACKEND_URL_VAL"
                  az webapp config appsettings set --name $FRONTEND_APP --resource-group $RG --settings BACKEND_URL=$BACKEND_URL_VAL

            # üõë 5. TAREA CLAVE: Configurar CORS en el Backend App Service
            - task: AzureCLI@2
              displayName: 'Configurar CORS en Backend PROD'
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  FRONTEND_URL_VAL="https://$(frontendAppNameProd).azurewebsites.net"
                  BACKEND_APP=$(backendAppNameProd)
                  RG=$(RESOURCE_GROUP_NAME)
                  echo "Configurando CORS en $BACKEND_APP para aceptar peticiones de $FRONTEND_URL_VAL"
                  az webapp cors add --name $BACKEND_APP --resource-group $RG --allowed-origins $FRONTEND_URL_VAL
