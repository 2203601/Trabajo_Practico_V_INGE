trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

stages:
# ===============================
# BUILD STAGE
# ===============================
- stage: Build
  displayName: "Build Backend & Frontend"
  jobs:
    - job: BuildJob
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: "Use Node.js 18"

        - script: |
            cd coffehub/backend
            npm install
          displayName: "Install backend dependencies"

        - script: |
            cd coffehub/frontend
            npm install
            npm run build || echo "No build script definido"
          displayName: "Build frontend"

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'coffehub/backend'
            artifact: 'backend'
          displayName: "Publicar Backend"

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'coffehub/frontend'
            artifact: 'frontend'
          displayName: "Publicar Frontend"

# ===============================
# SYNC QA WITH PROD
# ===============================
- stage: Sync_QA
  displayName: "Actualizar QA con datos de PROD"
  dependsOn: Build
  condition: succeeded()
  variables:
    QA_DB_HOST: 'localhost'
    QA_DB_USER: 'qa_user'
    QA_DB_PASS: 'qa_password'       
    QA_DB_NAME: 'coffeehub_qa'
    PROD_DB_HOST: 'localhost'
    PROD_DB_USER: 'root'
    PROD_DB_PASS: ''   
    PROD_DB_NAME: 'coffeehub'
  jobs:
    - job: SyncQA
      displayName: "Sync QA Database Corrected"
      steps:
        - script: |
            set -eux 
            echo "Sincronizando QA con PROD usando pipe y compresión..."
            
            mysqldump --single-transaction --verbose -h $(PROD_DB_HOST) -u $(PROD_DB_USER) $(PROD_DB_NAME) \
            | gzip \
            | gunzip \
            | mysql -h $(QA_DB_HOST) -u $(QA_DB_USER) -p$(QA_DB_PASS) $(QA_DB_NAME)
            
            echo "Sincronización completada."
          displayName: "Dump PROD -> Restore QA"

# ===============================
# DEPLOY QA
# ===============================
- stage: Deploy_QA
  displayName: "Desplegar a QA"
  dependsOn: Sync_QA
  condition: succeeded()
  variables:
    azureServiceConnection: 'azure-tp05-connection'
    backendAppName: 'Coffeehub-Back-QA'
    frontendAppName: 'Coffeehub-Front-QA'
    DB_HOST: 'localhost'
    DB_USER: 'qa_user'
    DB_PASS: 'qa_password'
    DB_NAME: 'coffeehub_qa'
  jobs:
    - deployment: DeployQA
      environment: 'QA'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: 'backend'
                  path: '$(Pipeline.Workspace)/backend'

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: 'frontend'
                  path: '$(Pipeline.Workspace)/frontend'

              - task: AzureWebApp@1
                displayName: "Deploy Backend QA"
                inputs:
                  azureSubscription: 'azure-tp05-connection'
                  appName: '$(backendAppName)'
                  package: '$(Pipeline.Workspace)/backend'
                  runtimeStack: 'NODE|18-lts'
                  StartupCommand: 'npm start'
                  appSettings: '-DB_HOST $(DB_HOST) -DB_USER $(DB_USER) -DB_PASS $(DB_PASS) -DB_NAME $(DB_NAME)'

              - task: AzureWebApp@1
                displayName: "Deploy Frontend QA"
                inputs:
                  azureSubscription: 'azure-tp05-connection'
                  appName: '$(frontendAppName)'
                  package: '$(Pipeline.Workspace)/frontend'
                  runtimeStack: 'NODE|18-lts'

# ===============================
# DEPLOY PROD
# ===============================
- stage: Deploy_PROD
  displayName: "Desplegar a Producción"
  dependsOn: Deploy_QA
  condition: succeeded()
  variables:
    azureServiceConnection: 'azure-tp05-connection'
    backendAppName: 'Coffeehub-Back-Prod'
    frontendAppName: 'Coffeehub-Front-Prod'
    DB_HOST: 'localhost'
    DB_USER: 'root'
    DB_PASS: '' # Secreto de PROD
    DB_NAME: 'coffeehub'
  jobs:
    - deployment: DeployPROD
      environment: 'PROD'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: 'backend'
                  path: '$(Pipeline.Workspace)/backend'

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: 'frontend'
                  path: '$(Pipeline.Workspace)/frontend'

              - task: AzureWebApp@1
                displayName: "Deploy Backend PROD"
                inputs:
                  azureSubscription: 'azure-tp05-connection'
                  appName: '$(backendAppName)'
                  package: '$(Pipeline.Workspace)/backend'
                  runtimeStack: 'NODE|18-lts'
                  StartupCommand: 'npm start'
                  appSettings: '-DB_HOST $(DB_HOST) -DB_USER $(DB_USER) -DB_PASS $(DB_PASS) -DB_NAME $(DB_NAME)'

              - task: AzureWebApp@1
                displayName: "Deploy Frontend PROD"
                inputs:
                  azureSubscription: 'azure-tp05-connection'
                  appName: '$(frontendAppName)'
                  package: '$(Pipeline.Workspace)/frontend'
                  runtimeStack: 'NODE|18-lts'

              - script: |
                  echo "Aplicando migraciones en PROD..."
                  cd $(Pipeline.Workspace)/backend
                  npx sequelize db:migrate
                displayName: "Migraciones PROD"