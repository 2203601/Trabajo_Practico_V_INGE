trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

stages:
# ===============================
# BUILD STAGE
# ===============================
- stage: Build
  displayName: "Build Backend & Frontend"
  jobs:
  - job: BuildJob
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
        displayName: "Use Node.js 18"

      - script: |
          cd coffehub/backend
          npm install
        displayName: "Install backend dependencies"

      - script: |
          cd coffehub/frontend
          # Use 'npm ci' for clean installs, if you have a lock file
          npm install 
          # Use 'npm run build || true' to ensure the pipeline continues even if the build script is missing 
          # or if it fails for non-critical projects, though for deployment, failure is usually desired.
          npm run build || echo "No build script definido"
        displayName: "Build frontend"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/backend'
          artifact: 'backend'
        displayName: "Publicar Backend"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'coffehub/frontend'
          artifact: 'frontend'
        displayName: "Publicar Frontend"

# ===============================
# SYNC QA WITH PROD (Optimizado y Debug)
# ===============================
- stage: Sync_QA
  displayName: "Actualizar QA con datos de PROD"
  dependsOn: Build
  condition: succeeded()
  variables:
    QA_DB_HOST: 'localhost'
    QA_DB_USER: 'qa_user'
    QA_DB_PASS: 'qa_password'       # secreto
    QA_DB_NAME: 'coffeehub_qa'
    PROD_DB_HOST: 'localhost'
    PROD_DB_USER: 'root'
    # ATENCIÓN: NUNCA USAR UNA CONTRASEÑA VACÍA EN PRODUCCIÓN REAL.
    # Esta variable debe ser un secreto en Azure DevOps.
    PROD_DB_PASS: ''   
    PROD_DB_NAME: 'coffeehub'
  jobs:
  - job: SyncQA
    displayName: "Sync QA Database Optimized"
    steps:
      - script: |
          # set -eux:
          # -e: Exit immediately if a command exits with a non-zero status.
          # -u: Treat unset variables as an error.
          # -x: Print commands and their arguments as they are executed (for debugging).
          set -eux 
          echo "Sincronizando QA con PROD usando pipe y compresión..."
          
          # Se agrega --verbose para obtener feedback si se queda atascado.
          # Se usa el formato -pPASS sin espacio para mysqldump.
          mysqldump --single-transaction --verbose -h $(PROD_DB_HOST) -u $(PROD_DB_USER) $(PROD_DB_NAME) \
          | gzip \
          | gunzip \
          | mysql -h $(QA_DB_HOST) -u $(QA_DB_USER) -p $(QA_DB_PASS) $(QA_DB_NAME)
          
          echo "Sincronización completada."
        displayName: "Dump PROD -> Restore QA (Optimizado y Debug)"

# ===============================
# DEPLOY QA
# ===============================
- stage: Deploy_QA
  displayName: "Desplegar a QA"
  dependsOn: Sync_QA
  condition: succeeded()
  variables:
    azureServiceConnection: 'azure-tp05-connection'
    backendAppName: 'Coffeehub-Back-QA'
    frontendAppName: 'Coffeehub-Front-QA'
    DB_HOST: 'localhost'
    DB_USER: 'qa_user'
    DB_PASS: 'qa_password'
    DB_NAME: 'coffeehub_qa'
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend'
                path: '$(Pipeline.Workspace)/backend'

            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend'
                path: '$(Pipeline.Workspace)/frontend'

            - task: AzureWebApp@1
              displayName: "Deploy Backend QA"
              inputs:
                azureSubscription: 'azure-tp05-connection'
                appName: '$(backendAppName)'
                package: '$(Pipeline.Workspace)/backend'
                runtimeStack: 'NODE|18-lts'
                # Se utiliza el formato multilínea para App Settings para claridad.
                appSettings: |
                  -DB_HOST $(DB_HOST)
                  -DB_USER $(DB_USER)
                  -DB_PASS $(DB_PASS)
                  -DB_NAME $(DB_NAME)

            - task: AzureWebApp@1
              displayName: "Deploy Frontend QA"
              inputs:
                azureSubscription: 'azure-tp05-connection'
                appName: '$(frontendAppName)'
                package: '$(Pipeline.Workspace)/frontend'
                runtimeStack: 'NODE|18-lts'

# ===============================
# DEPLOY PROD
# ===============================
- stage: Deploy_PROD
  displayName: "Desplegar a Producción"
  dependsOn: Deploy_QA
  condition: succeeded()
  variables:
    azureServiceConnection: 'azure-tp05-connection'
    backendAppName: 'Coffeehub-Back-Prod'
    frontendAppName: 'Coffeehub-Front-Prod'
    DB_HOST: 'localhost'
    DB_USER: 'root'
    # ATENCIÓN: Esta variable debe ser un secreto en Azure DevOps.
    DB_PASS: ''
    DB_NAME: 'coffeehub'
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'backend'
                path: '$(Pipeline.Workspace)/backend'

            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend'
                path: '$(Pipeline.Workspace)/frontend'

            - task: AzureWebApp@1
              displayName: "Deploy Backend PROD"
              inputs:
                azureSubscription: 'azure-tp05-connection'
                appName: '$(backendAppName)'
                package: '$(Pipeline.Workspace)/backend'
                runtimeStack: 'NODE|18-lts'
                appSettings: |
                  -DB_HOST $(DB_HOST)
                  -DB_USER $(DB_USER)
                  -DB_PASS $(DB_PASS)
                  -DB_NAME $(DB_NAME)

            - task: AzureWebApp@1
              displayName: "Deploy Frontend PROD"
              inputs:
                azureSubscription: 'azure-tp05-connection'
                appName: '$(frontendAppName)'
                package: '$(Pipeline.Workspace)/frontend'
                runtimeStack: 'NODE|18-lts'

            # Nota: Las migraciones deben ejecutarse DENTRO del artefacto desplegado
            # o en un paso separado con la infraestructura de la base de datos accesible.
            # Este paso ASUME que el agente tiene acceso al código y a la base de datos PROD
            # y que el comando sequelize es accesible desde el agente.
            - script: |
                echo "Aplicando migraciones en PROD..."
                # Debe usar la ruta donde descargó el artefacto si quiere ejecutar comandos
                # sobre el código (e.g., $(Pipeline.Workspace)/backend).
                # La ruta 'coffehub/backend' solo funciona si el agente la tiene.
                # Se usará la ruta del workspace para mayor coherencia:
                cd $(Pipeline.Workspace)/backend 
                npx sequelize db:migrate
              displayName: "Migraciones PROD"