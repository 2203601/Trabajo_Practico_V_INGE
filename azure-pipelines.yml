# azure-pipelines.yml
# Soluci√≥n Final: Sincronizaci√≥n de Datos QA -> PROD usando SQLite + Build Directo en Azure

trigger:
  branches:
    include:
      - main

pool:
  name: SelfHosted

variables:
    # üõëüõ†Ô∏è 1. ACTUALIZAR: Nombre del Grupo de Recursos (CR√çTICO para Azure CLI)
    RESOURCE_GROUP_NAME: 'TPS-INGE-2025' 
    # üõëüõ†Ô∏è 2. ACTUALIZAR: Nombre de tu conexi√≥n general de Azure (es la √∫nica que tienes)
    azureServiceConnection: 'azure-tp05-connection'
    
    # Nombres de App Services
    backendAppNameQA: 'Coffeehub-Back-QA'
    frontendAppNameQA: 'Coffeehub-Front-QA'
    backendAppNameProd: 'Coffeehub-Back-Prod'
    frontendAppNameProd: 'Coffeehub-Front-Prod'


# ===============================
# BUILD STAGE (ELIMINADA) - Ahora el build se hace DENTRO de las etapas de Deploy.
# ===============================
stages:
- stage: Deploy_QA
  displayName: "Desplegar a QA"
  # Ya no depende de Build
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Despliega la Carpeta del Backend y Fuerza el Build/Run en Azure
            # Esto construye la imagen Docker internamente y la ejecuta.
            - task: AzureWebApp@1
              displayName: "Deploy Backend QA (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameQA)'
                appType: 'webAppContainer'
                # Path de la carpeta que contiene el Dockerfile y server.js
                package: '$(System.DefaultWorkingDirectory)/coffehub/backend' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM' 
                startUpCommand: 'sh -c "npm install && npm start"' 
            
            # 2. Despliega el Frontend est√°tico
            - task: PublishPipelineArtifact@1
              inputs:
                targetPath: 'coffehub/frontend'
                artifact: 'frontend'
              displayName: "Publicar Frontend QA para Descarga"

            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend'
                path: '$(Pipeline.Workspace)/frontend'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend QA"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameQA)'
                package: '$(Pipeline.Workspace)/frontend'
                runtimeStack: 'NODE|18-lts'



# ---------------------------------
# SINCRONIZACI√ìN DE DATOS (Copia coffeehub.db)
# ---------------------------------
- stage: Sync_Data_QA_to_PROD
  displayName: "Sincronizar DB de QA a PROD (SQLite)"
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - job: Sync
    displayName: "Copiar coffeehub.db"
    steps:
      - task: AzureCLI@2
        displayName: "Sincronizar DB v√≠a CLI"
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            DB_FILE='coffeehub.db'
            SOURCE_APP=$(backendAppNameQA)
            TARGET_APP=$(backendAppNameProd)
            RG=$(RESOURCE_GROUP_NAME)
            
            # 1. Descargar el archivo coffeehub.db desde el App Service QA
            echo "1. Descargando DB de QA ($SOURCE_APP)..."
            az webapp log download --name $SOURCE_APP --resource-group $RG --log-file $DB_FILE --path '/home/site/wwwroot/$DB_FILE' || { 
              echo "Error: No se pudo descargar el archivo $DB_FILE. Aseg√∫rese de que el archivo existe en QA." 
              exit 1 
            }
            
            # 2. Subir el archivo coffeehub.db al App Service PROD (Sobrescribe)
            echo "2. Subiendo DB a PROD ($TARGET_APP)..."
            zip -r db_transfer.zip $DB_FILE
            az webapp deploy --name $TARGET_APP --resource-group $RG --type zip --src-path db_transfer.zip --target-path '/home/site/wwwroot/'
            
            echo "‚úÖ Datos de QA ($DB_FILE) copiados a PROD. Sincronizaci√≥n completada."




# ===============================
# DEPLOY PROD (Build Directo en Azure)
# ===============================
- stage: Deploy_PROD
  displayName: "Desplegar a Producci√≥n"
  dependsOn: Sync_Data_QA_to_PROD 
  condition: succeeded()
  jobs:
  - deployment: DeployPROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
            # 1. Despliega la Carpeta del Backend y Fuerza el Build/Run en Azure
            - task: AzureWebApp@1
              displayName: "Deploy Backend PROD (Build Directo)"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(backendAppNameProd)'
                appType: 'webAppContainer'
                # Path de la carpeta que contiene el Dockerfile y server.js
                package: '$(System.DefaultWorkingDirectory)/coffehub/backend' 
                deploymentMethod: 'auto'
                runtimeStack: 'DOCKER|CUSTOM'
                startUpCommand: 'sh -c "npm install && npm start"'
            
            # 2. Despliega el Frontend est√°tico
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'frontend'
                path: '$(Pipeline.Workspace)/frontend'

            - task: AzureWebApp@1
              displayName: "Deploy Frontend PROD"
              inputs:
                azureSubscription: '$(azureServiceConnection)'
                appName: '$(frontendAppNameProd)'
                package: '$(Pipeline.Workspace)/frontend'
                runtimeStack: 'NODE|18-lts'